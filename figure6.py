#!/usr/bin/python
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mlib
from matplotlib.lines import Line2D
# fig1 = plt.figure(facecolor='white')
viridis_cmap = mlib.cm.get_cmap('viridis')
blues_cmap = mlib.cm.get_cmap('Greens')
purd_cmap = mlib.cm.get_cmap('PuRd')
mlib.rcParams.update({'font.size': 12})

def make_plot():
    tonic = np.loadtxt("dataFiles/tonic_spiking.txt")
    phasic = np.loadtxt("dataFiles/phasic_spiking.txt")
    class_2 = np.loadtxt("dataFiles/class_2_excitable.txt")
    sub_thresh = np.loadtxt("dataFiles/sub_thresh_oscillations.txt")
    integrator = np.loadtxt("dataFiles/integrator.txt")
    rebound_spike = np.loadtxt("dataFiles/rebound_spike.txt")
    threshold_variability = np.loadtxt("dataFiles/threshold_variability.txt")
    accommodation = np.loadtxt("dataFiles/accomodation.txt")
    rebound_burst = np.loadtxt("dataFiles/rebound_burst.txt")
    spike_rate_adaptation = np.loadtxt("dataFiles/spike_rate_adaptation.txt")
    XOR = np.loadtxt("XOR.txt")



    zeros = np.zeros([100000])
    # fig = plt.figure()
    mlib.rcParams.update({'font.size': 18})

    custom_lines = [Line2D([0], [0], color=viridis_cmap(0.15), alpha = 1),
                    Line2D([0], [0], color='k', alpha = 0.9),
                    Line2D([0], [0], color='b', alpha = 0.7)]
    fig, ax = plt.subplots(2, 5)


    ax[0][0].plot(tonic[0][:700], color=viridis_cmap(0.15), label ='$V_{soma}$')
    ax[0][0].set_ylim([-100, 50])
    ax[0][0].yaxis.set_ticks_position('left')
    ax[0][0].set_yticks([-60, 40])
    ax[0][0].set_xticks([0, 600])
    ax[0][0].spines['right'].set_visible(False)
    ax[0][0].spines['top'].set_visible(False)
    ax[0][0].axes.xaxis.set_visible(False)
    ax[0][0].set_ylabel('Membrane voltage (mv)')
    ax0 = ax[0][0].twinx()
    ax0.plot(tonic[1][:700], color='k', alpha = 0.9, label ='$I_{e}^{soma}$')
    ax0.set_ylim([-5, 200])
    ax0.set_yticks([0, 10])
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.axes.yaxis.set_visible(False)


    ax[0][1].plot(phasic[0][:500], color=viridis_cmap(0.15))
    ax[0][1].set_ylim([-100, 25])
    ax0 = ax[0][1].twinx()
    ax0.plot(phasic[1][:500], color='k', alpha = 0.9)
    ax0.set_ylim([-3, 150])
    ax0.axes.yaxis.set_visible(False)
    ax[0][1].axes.yaxis.set_visible(False)
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax0.spines['bottom'].set_visible(False)
    ax[0][1].spines['right'].set_visible(False)
    ax[0][1].spines['left'].set_visible(False)
    ax[0][1].spines['top'].set_visible(False)
    ax[0][1].axes.xaxis.set_visible(False)


    ax[0][2].plot(sub_thresh[0][:500], color=viridis_cmap(0.15))
    ax[0][2].set_ylim([-100, 50])
    ax0 = ax[0][2].twinx()
    ax0.plot(sub_thresh[1][:500], color='k', alpha = 0.9)
    ax0.set_ylim([-3, 150])
    ax0.axes.yaxis.set_visible(False)
    ax[0][2].axes.yaxis.set_visible(False)
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax[0][2].spines['right'].set_visible(False)
    ax[0][2].spines['left'].set_visible(False)
    ax[0][2].spines['top'].set_visible(False)
    ax[0][2].axes.xaxis.set_visible(False)


    ax[0][3].plot(accommodation[0][:1000], color=viridis_cmap(0.15))
    ax[0][3].set_ylim([-100, 50])
    ax0 = ax[0][3].twinx()
    ax0.plot(accommodation[1][:1000], color='k', alpha = 0.9)
    ax0.set_ylim([-8, 250])
    ax0.axes.yaxis.set_visible(False)
    ax[0][3].axes.yaxis.set_visible(False)
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax[0][3].spines['right'].set_visible(False)
    ax[0][3].spines['left'].set_visible(False)
    ax[0][3].spines['top'].set_visible(False)
    ax[0][3].axes.xaxis.set_visible(False)



    ax[0][4].plot(class_2[0], color=viridis_cmap(0.15))
    ax[0][4].set_ylim([-90, 30])
    ax[0][4].axes.yaxis.set_visible(False)
    ax0 = ax[0][4].twinx()
    ax0.plot(class_2[1], color='k', alpha = 0.9)
    ax0.set_ylim([-10, 400])
    ax0.axes.yaxis.set_visible(True)
    ax0.set_yticks([0, 30])
    ax0.spines['right'].set_visible(True)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax[0][4].spines['right'].set_visible(False)
    ax[0][4].spines['top'].set_visible(False)
    ax[0][4].spines['left'].set_visible(False)
    ax[0][4].axes.xaxis.set_visible(False)
    ax0.set_ylabel("Current (nA)")

    ax[1][0].plot(rebound_spike[0][:500], color=viridis_cmap(0.15))
    ax[1][0].set_ylim([-115, 60])
    ax[1][0].set_yticks([-60, 40])
    ax[1][0].spines['right'].set_visible(False)
    ax[1][0].spines['top'].set_visible(False)
    ax[1][0].axes.xaxis.set_visible(False)
    ax[1][0].set_ylabel('Membrane voltage (mv)')
    ax0 = ax[1][0].twinx()
    ax0.plot(rebound_spike[1][:500], color='k', alpha = 0.9)
    ax0.set_ylim([-45, 700])
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.axes.yaxis.set_visible(False)


    ax[1][1].plot(integrator[0][:1000], color=viridis_cmap(0.15))
    ax[1][1].set_ylim([-100, 50])
    ax0 = ax[1][1].twinx()
    ax0.plot(integrator[1][:1000], color='k', alpha = 0.9)
    ax0.set_ylim([-8, 100])
    ax0.axes.yaxis.set_visible(False)
    ax[1][1].axes.yaxis.set_visible(False)
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax[1][1].spines['right'].set_visible(False)
    ax[1][1].spines['left'].set_visible(False)
    ax[1][1].spines['top'].set_visible(False)
    ax[1][1].axes.xaxis.set_visible(False)

    ax[1][2].plot(threshold_variability[0][:1000], color=viridis_cmap(0.15))
    ax[1][2].set_ylim([-100, 50])
    ax0 = ax[1][2].twinx()
    ax0.plot(threshold_variability[1][:1000], color='k', alpha = 0.9)
    ax0.set_ylim([-8, 100])
    ax[1][2].axes.yaxis.set_visible(False)
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax0.axes.yaxis.set_visible(False)
    ax[1][2].spines['right'].set_visible(False)
    ax[1][2].spines['left'].set_visible(False)
    ax[1][2].spines['top'].set_visible(False)
    ax[1][2].axes.xaxis.set_visible(False)

    ax[1][3].plot(spike_rate_adaptation[0][:3000], color=viridis_cmap(0.15))
    ax[1][3].set_ylim([-100, 30])
    ax0 = ax[1][3].twinx()
    ax0.plot(spike_rate_adaptation[1][:3000], color='b', alpha = 0.7, label ='$I_{e}^{dend}$')
    ax0.set_ylim([-10, 400])
    ax0.axes.yaxis.set_visible(False)
    ax[1][3].axes.yaxis.set_visible(False)
    ax0.spines['right'].set_visible(False)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax[1][3].spines['right'].set_visible(False)
    ax[1][3].spines['left'].set_visible(False)
    ax[1][3].spines['top'].set_visible(False)
    ax[1][3].axes.xaxis.set_visible(False)

    ax[1][4].plot(XOR[0][:], color=viridis_cmap(0.15))
    ax[1][4].set_ylim([-100, 30])
    ax[1][4].set_yticks([-60, 40])
    ax[1][4].axes.yaxis.set_visible(False)
    ax0 = ax[1][4].twinx()
    ax0.plot(XOR[1][:], color='b', alpha = 0.7, label ='$I_{e}^{dend}$')
    ax0.set_ylim([25, 150])
    ax0.axes.yaxis.set_visible(True)
    ax0.set_yticks([25, 40])
    ax0.set_yticklabels(['0', '10'])
    ax[1][4].axes.yaxis.set_visible(False)
    ax0.spines['right'].set_visible(True)
    ax0.spines['top'].set_visible(False)
    ax0.spines['left'].set_visible(False)
    ax[1][4].spines['right'].set_visible(False)
    ax[1][4].spines['top'].set_visible(False)
    ax[1][4].spines['left'].set_visible(False)
    ax[1][4].axes.xaxis.set_visible(False)
    ax0.set_ylabel("Current (nA)")


    ax[0][0].set_title("Tonic spike")
    ax[0][1].set_title("Phasic spike")
    ax[0][2].set_title("Oscillations")
    ax[0][3].set_title("Accommodation")
    ax[0][4].set_title("Class II")
    ax[1][0].set_title("Rebound Spike")
    ax[1][1].set_title("Integrator")
    ax[1][2].set_title("Variable threshold")
    ax[1][3].set_title("Adaptation")
    ax[1][4].set_title("XOR")


def main():
    make_plot()
    plt.show()


if __name__ == '__main__':
    main()
